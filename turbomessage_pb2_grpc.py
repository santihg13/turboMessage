# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import turbomessage_pb2 as turbomessage__pb2


class TurboMessageStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.registerUser = channel.unary_unary(
                '/turbomessage.TurboMessage/registerUser',
                request_serializer=turbomessage__pb2.User.SerializeToString,
                response_deserializer=turbomessage__pb2.Status.FromString,
                )
        self.checkUser = channel.unary_unary(
                '/turbomessage.TurboMessage/checkUser',
                request_serializer=turbomessage__pb2.User.SerializeToString,
                response_deserializer=turbomessage__pb2.Status.FromString,
                )
        self.sendEmail = channel.unary_unary(
                '/turbomessage.TurboMessage/sendEmail',
                request_serializer=turbomessage__pb2.Email.SerializeToString,
                response_deserializer=turbomessage__pb2.Status.FromString,
                )
        self.readIncomingEmails = channel.unary_stream(
                '/turbomessage.TurboMessage/readIncomingEmails',
                request_serializer=turbomessage__pb2.User.SerializeToString,
                response_deserializer=turbomessage__pb2.Email.FromString,
                )
        self.readOutgoingEmails = channel.unary_stream(
                '/turbomessage.TurboMessage/readOutgoingEmails',
                request_serializer=turbomessage__pb2.User.SerializeToString,
                response_deserializer=turbomessage__pb2.Email.FromString,
                )
        self.deleteIncomingEmail = channel.unary_unary(
                '/turbomessage.TurboMessage/deleteIncomingEmail',
                request_serializer=turbomessage__pb2.Email.SerializeToString,
                response_deserializer=turbomessage__pb2.Status.FromString,
                )
        self.deleteOutgoingEmail = channel.unary_unary(
                '/turbomessage.TurboMessage/deleteOutgoingEmail',
                request_serializer=turbomessage__pb2.Email.SerializeToString,
                response_deserializer=turbomessage__pb2.Status.FromString,
                )
        self.markEmailAsRead = channel.unary_unary(
                '/turbomessage.TurboMessage/markEmailAsRead',
                request_serializer=turbomessage__pb2.Email.SerializeToString,
                response_deserializer=turbomessage__pb2.Status.FromString,
                )
        self.fetchInbox = channel.unary_unary(
                '/turbomessage.TurboMessage/fetchInbox',
                request_serializer=turbomessage__pb2.FetchInboxRequest.SerializeToString,
                response_deserializer=turbomessage__pb2.FetchInboxResponse.FromString,
                )
        self.fetchSentMail = channel.unary_unary(
                '/turbomessage.TurboMessage/fetchSentMail',
                request_serializer=turbomessage__pb2.SentMailRequest.SerializeToString,
                response_deserializer=turbomessage__pb2.SentMailResponse.FromString,
                )
        self.deleteEmail = channel.unary_unary(
                '/turbomessage.TurboMessage/deleteEmail',
                request_serializer=turbomessage__pb2.DeleteEmailRequest.SerializeToString,
                response_deserializer=turbomessage__pb2.DeleteEmailResponse.FromString,
                )
        self.readEmail = channel.unary_unary(
                '/turbomessage.TurboMessage/readEmail',
                request_serializer=turbomessage__pb2.ReadEmailRequest.SerializeToString,
                response_deserializer=turbomessage__pb2.ReadEmailResponse.FromString,
                )


class TurboMessageServicer(object):
    """Missing associated documentation comment in .proto file."""

    def registerUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def checkUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendEmail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def readIncomingEmails(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def readOutgoingEmails(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteIncomingEmail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteOutgoingEmail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def markEmailAsRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def fetchInbox(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def fetchSentMail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteEmail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def readEmail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TurboMessageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'registerUser': grpc.unary_unary_rpc_method_handler(
                    servicer.registerUser,
                    request_deserializer=turbomessage__pb2.User.FromString,
                    response_serializer=turbomessage__pb2.Status.SerializeToString,
            ),
            'checkUser': grpc.unary_unary_rpc_method_handler(
                    servicer.checkUser,
                    request_deserializer=turbomessage__pb2.User.FromString,
                    response_serializer=turbomessage__pb2.Status.SerializeToString,
            ),
            'sendEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.sendEmail,
                    request_deserializer=turbomessage__pb2.Email.FromString,
                    response_serializer=turbomessage__pb2.Status.SerializeToString,
            ),
            'readIncomingEmails': grpc.unary_stream_rpc_method_handler(
                    servicer.readIncomingEmails,
                    request_deserializer=turbomessage__pb2.User.FromString,
                    response_serializer=turbomessage__pb2.Email.SerializeToString,
            ),
            'readOutgoingEmails': grpc.unary_stream_rpc_method_handler(
                    servicer.readOutgoingEmails,
                    request_deserializer=turbomessage__pb2.User.FromString,
                    response_serializer=turbomessage__pb2.Email.SerializeToString,
            ),
            'deleteIncomingEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteIncomingEmail,
                    request_deserializer=turbomessage__pb2.Email.FromString,
                    response_serializer=turbomessage__pb2.Status.SerializeToString,
            ),
            'deleteOutgoingEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteOutgoingEmail,
                    request_deserializer=turbomessage__pb2.Email.FromString,
                    response_serializer=turbomessage__pb2.Status.SerializeToString,
            ),
            'markEmailAsRead': grpc.unary_unary_rpc_method_handler(
                    servicer.markEmailAsRead,
                    request_deserializer=turbomessage__pb2.Email.FromString,
                    response_serializer=turbomessage__pb2.Status.SerializeToString,
            ),
            'fetchInbox': grpc.unary_unary_rpc_method_handler(
                    servicer.fetchInbox,
                    request_deserializer=turbomessage__pb2.FetchInboxRequest.FromString,
                    response_serializer=turbomessage__pb2.FetchInboxResponse.SerializeToString,
            ),
            'fetchSentMail': grpc.unary_unary_rpc_method_handler(
                    servicer.fetchSentMail,
                    request_deserializer=turbomessage__pb2.SentMailRequest.FromString,
                    response_serializer=turbomessage__pb2.SentMailResponse.SerializeToString,
            ),
            'deleteEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteEmail,
                    request_deserializer=turbomessage__pb2.DeleteEmailRequest.FromString,
                    response_serializer=turbomessage__pb2.DeleteEmailResponse.SerializeToString,
            ),
            'readEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.readEmail,
                    request_deserializer=turbomessage__pb2.ReadEmailRequest.FromString,
                    response_serializer=turbomessage__pb2.ReadEmailResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'turbomessage.TurboMessage', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TurboMessage(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def registerUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/turbomessage.TurboMessage/registerUser',
            turbomessage__pb2.User.SerializeToString,
            turbomessage__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def checkUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/turbomessage.TurboMessage/checkUser',
            turbomessage__pb2.User.SerializeToString,
            turbomessage__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/turbomessage.TurboMessage/sendEmail',
            turbomessage__pb2.Email.SerializeToString,
            turbomessage__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def readIncomingEmails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/turbomessage.TurboMessage/readIncomingEmails',
            turbomessage__pb2.User.SerializeToString,
            turbomessage__pb2.Email.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def readOutgoingEmails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/turbomessage.TurboMessage/readOutgoingEmails',
            turbomessage__pb2.User.SerializeToString,
            turbomessage__pb2.Email.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteIncomingEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/turbomessage.TurboMessage/deleteIncomingEmail',
            turbomessage__pb2.Email.SerializeToString,
            turbomessage__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteOutgoingEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/turbomessage.TurboMessage/deleteOutgoingEmail',
            turbomessage__pb2.Email.SerializeToString,
            turbomessage__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def markEmailAsRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/turbomessage.TurboMessage/markEmailAsRead',
            turbomessage__pb2.Email.SerializeToString,
            turbomessage__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def fetchInbox(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/turbomessage.TurboMessage/fetchInbox',
            turbomessage__pb2.FetchInboxRequest.SerializeToString,
            turbomessage__pb2.FetchInboxResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def fetchSentMail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/turbomessage.TurboMessage/fetchSentMail',
            turbomessage__pb2.SentMailRequest.SerializeToString,
            turbomessage__pb2.SentMailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/turbomessage.TurboMessage/deleteEmail',
            turbomessage__pb2.DeleteEmailRequest.SerializeToString,
            turbomessage__pb2.DeleteEmailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def readEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/turbomessage.TurboMessage/readEmail',
            turbomessage__pb2.ReadEmailRequest.SerializeToString,
            turbomessage__pb2.ReadEmailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
